{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi there!","text":"<p>I created this website to document my journey from software engineering into AI. I hope that readers who are looking for practical advice, career inspiration, or just a fresh perspective will find something interesting and useful among the stories and learnings I write about.</p> <p>Jump straight to my latest posts here, or check out the categories in the sidebar for more specific topics.</p>","tags":["Software Engineering","Artificial Intelligence","Personal Development","Career Inspiration","Learning Journey"]},{"location":"#newsletter","title":"Newsletter","text":"<p>To stay in the loop, subscribe to my newsletter, which I use to send summaries of new posts no more than once per month.  </p> <p> Subscribe to my Newsletter</p>","tags":["Software Engineering","Artificial Intelligence","Personal Development","Career Inspiration","Learning Journey"]},{"location":"#socials","title":"Socials","text":"<p>You can connect and follow me on  Twitter and  GitHub to always see the latest updates. I do have a  LinkedIn profile, but I'm not very active there. If you want to connect, please send me a message on .</p>","tags":["Software Engineering","Artificial Intelligence","Personal Development","Career Inspiration","Learning Journey"]},{"location":"user-manual/","title":"User Manual","text":"<p>This guide is meant to help us work together more effectively by sharing my preferences and work style. While it may seem formal, think of it as a friendly \u201cuser manual\u201d that can help reduce misunderstandings and make our collaboration smoother. These aren't rigid rules\u2014they're simply patterns I've found helpful throughout my career. Feel free to use this as a starting point for discussion; I\u2019m always open to adapting based on what works best for the team.</p>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#about-me","title":"About Me","text":"<ul> <li>Location: Originally from Germany, currently based in the UK/EU.</li> <li>Professional Background: Experienced in backend software engineering (ex-Reddit), data science, and data engineering, with a focus on information retrieval (search) and building distributed, data-intensive applications and platforms.</li> <li>What Drives Me: I thrive on interesting challenges and love working with bright, motivated colleagues who share a passion for problem-solving and growth.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#what-i-value-most","title":"What I Value Most","text":"<p>Teamwork is like team sports: Everyone has a specific skill and plays a specific position, and when the moment requires it, we pass each other the ball to win.</p>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#teamwork-collaboration","title":"Teamwork &amp; Collaboration","text":"<ul> <li>\u201cTeamwork is a team sport\u201d: Everyone has unique strengths and positions. We give each other assists to win as a team.</li> <li>I love working with bright, motivated colleagues.</li> <li>I focus on tasks with teamwork driven by mission and learning, not ego.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#productivity","title":"Productivity","text":"<p>Productivity needs focus. The following is not a prescription, but a pattern that has worked well for me in the past.</p> <ul> <li>Mornings: Focused, using the Pomodoro technique with noise-cancelling headphones. Unless it is urgent, please send a DM and allow me to respond asynchronously.</li> <li>Pre-lunch: I catch up on emails and messages.</li> <li>Around Lunchtime: I'm open to socialising and chatting. Connecting with others energises me and sparks new ideas. Many of my side projects at work got started this way.</li> <li>Afternoons: Great for meetings, asking for my help, or brainstorming ideas. \u2800</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#decision-making","title":"Decision-Making","text":"<ul> <li>Decisions should be based on data so they can be justified.</li> <li>If data is lacking, use knowledge and experience as a proxy. Especially when it comes to social decisions or situations affecting \u201chow\u201d we work together.</li> <li>Engineering is a collaborative enterprise. Being a \u201chero engineer\u201d only gets you so far (trust me, I've been there) \u2014 I prefer a collaborative approach leading to more informed decisions, making everyone smarter, and buy-in from others.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#meeting-preferences","title":"Meeting Preferences","text":"<ul> <li>Agenda and intended outcomes are known before the meeting.</li> <li>Meetings should have actionable outcomes with follow-ups.</li> <li>I prefer meetings after lunch to preserve my deep-focus time in the morning.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#communication","title":"Communication","text":"","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#preferred-channels","title":"Preferred Channels","text":"<ul> <li>Primarily verbal or direct messages (DMs).</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#how-i-often-communicate","title":"How I often communicate","text":"<ul> <li>DM or verbally in person.</li> <li>I\u2019m formal when needed but always respectful, outcome-focused, and intentional.</li> <li>If you see me asking \u201cwhy,\u201d it\u2019s because I want to understand the reasoning or the deeper intention behind a task.</li> <li>I enjoy discussing ideas and challenges. Despite being German, I\u2019m open to humour\u2014collaboration doesn\u2019t have to be stuffy.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#how-i-give-feedback","title":"How I Give Feedback","text":"<ul> <li>Positive Feedback: Prompt and usually public (or private if we have rapport), but always genuine.</li> <li>Constructive Feedback: Discussed privately, focusing on problem-solving. I often ask, \u201cWhat do you think we need to do to fix X?\u201d to foster solutions rather than dwelling on mistakes. I\u2019m here to help resolve issues.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#how-id-like-to-receive-feedback","title":"How I\u2019d Like to Receive Feedback","text":"<ul> <li>Genuine, verbal, informal, and timely.</li> <li>I prefer actionable suggestions for growth \u2014 whether personal or professional.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#as-a-leadmanager","title":"As a Lead/Manager","text":"<p>\u201cA team is like a fist; it is only as strong as the individual fingers that hold together.\u201d \u2014 Karin S.</p> <ul> <li>I\u2019ll shield the team from outside pressure; we tackle challenges together.</li> <li>I'm fine with silliness and fun at work as long as our tasks are completed by us. Some of my most enjoyable moments in my career involved playing pranks on our line manager while delivering a distributed search and storage backend across thousands of servers in a dozen data centres, managing 100 petabytes of data.</li> <li>Enjoy your work, and show what you can do.</li> <li>I prioritize understanding errors in context rather than attributing them to personal traits (\u201cFundamental Attribution Error\u201d). I care about what you learn from mistakes.</li> <li>I understand that people have different preferences, personalities, and quirks. And sometimes people simply just don't like each other. If you have a work conflict, I'll encourage you and the other party to talk it out and negotiate a win-win solution.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#what-i-find-most-helpful-or-challenging","title":"What I Find Most Helpful or Challenging","text":"<p>\u201cThe easiest way to become a 10x engineer is to help five 1x engineers become 2x engineers.\u201d</p>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#most-helpful","title":"Most Helpful","text":"<ul> <li>Being yourself and sharing positivity.</li> <li>Clear communication with relevant updates (including successes).</li> <li>Meetings with agendas and actionable outcomes.</li> <li>When I need help, show me how to help myself next time.</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"user-manual/#most-challenging","title":"Most Challenging","text":"<ul> <li>Gatekeeping or dismissiveness.</li> <li>People who take but don\u2019t give.</li> <li>A perpetual negative focus.</li> <li>Non-technical managers with zero experience</li> </ul>","tags":["User Manual","Collaboration","Work Style","Software Engineering","Personal Growth"]},{"location":"reading/book-club/","title":"DS/ML Book Club","text":"<p>If you like to read books and discuss them with others, I can recommend the free Data Science and Machine Learning Book Club. Each Month, the community votes on a book for members to read and discuss asynchronously on Discord. Often, there is an interesting live post-reading discussion with the authors on YouTube.</p> <p>Some of the past readings made it into my reading list.</p>","tags":["Book Club","Data Science","Machine Learning","Reading","Community"]},{"location":"reading/books/","title":"Books","text":"<p>A journey into a career in AI/ML is not complete without the support of great books. Here are the ones I've selected to read. Checkout the DS/ML Book Club for more recommendations.</p>","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"reading/books/#currently-reading","title":"Currently reading","text":"<ul> <li>Writing for Developers by Piotr Sarna and Cynthia Dunlop, November 2024.   ISBN 9781633436282  \u21e8  Manning Publications.</li> </ul>","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"reading/books/#my-backlog","title":"My backlog","text":"","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"reading/books/#interview-preparation","title":"Interview preparation","text":"<ul> <li>Ace the Data Science Interview 201 Real Interview Questions Asked by FAANG, Tech Startups, &amp; Wall Street, by Kevin Huo and Nick Singh, August 2021.   ISBN: 978-0578973838 \u21e8  Google Books</li> </ul>","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"reading/books/#machine-learning","title":"Machine Learning","text":"<ul> <li>Machine Learning Engineering in Action, Ben Wilson, March 2022.   ISBN 9781617298714 \u21e8  Manning Publications.</li> </ul>","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"reading/books/#machine-learning-systems","title":"Machine Learning Systems","text":"<ul> <li> <p>Designing Machine Learning Systems An Iterative Process for Production-Ready Applications, by Chip Huyen, May 2022.   ISBN 9781098107963 \u21e8 O'Reilly Media.</p> </li> <li> <p>AI Engineering Building Applications with Foundation Models, by Chip Huyen, December 2024.   ISBN 9781098166304 \u21e8 O'Reilly Media.</p> </li> </ul>","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"reading/books/#leadership-and-career","title":"Leadership and Career","text":"<ul> <li> <p>Build a Career in Data Science, by Emily Robinson and Jacqueline Nolis, March 2020.     ISBN 9781617296246 \u21e8 Manning Publications.</p> </li> <li> <p>How to Lead in Data Science, by Jike Chong and Yue Cathy Chang, November 2021.   ISBN 9781617298899 \u21e8 Manning Publications.</p> </li> <li> <p>Managing Machine Learning Projects, by Simon Thompson, March 2023.   ISBN 9781633439023 \u21e8 Manning Publications.</p> </li> <li> <p>Lead Developer Career Guide, by Shelley Benhoff, October 2024.   ISBN 9781633438071 \u21e8  Manning Publications.</p> </li> </ul>","tags":["AI books","ML resources","Data Science","Career development","Interview preparation"]},{"location":"writing/","title":"Blog","text":"<p>I mainly write about learnings, challenges and projects that I encounter during my transition from software engineering to AI. Due to my background is in software engineering, you will also find articles that focus on system design and technical leadership.</p>","tags":["AI","Software Engineering","System Design","Developer Tools","Technical Leadership","Newsletter"]},{"location":"writing/#newsletter","title":"Newsletter","text":"<p>To stay in the loop, subscribe to my newsletter which I use to send summaries of new posts no more than once per month.</p> <p> Subscribe to my Newsletter</p>","tags":["AI","Software Engineering","System Design","Developer Tools","Technical Leadership","Newsletter"]},{"location":"writing/#interviews","title":"Interviews","text":"<ul> <li> Interview: Working with an SRE</li> </ul>","tags":["AI","Software Engineering","System Design","Developer Tools","Technical Leadership","Newsletter"]},{"location":"writing/#system-design","title":"System Design","text":"<ul> <li> How to Choose Tech for Production: The Default Heuristic</li> </ul>","tags":["AI","Software Engineering","System Design","Developer Tools","Technical Leadership","Newsletter"]},{"location":"writing/#developer-tools","title":"Developer Tools","text":"<ul> <li>uv - An ultra fast package manager for Python</li> </ul>","tags":["AI","Software Engineering","System Design","Developer Tools","Technical Leadership","Newsletter"]},{"location":"writing/2025/02/23/dev-tools-uv/","title":"uv - An extremely fast Python package and project manager, written in Rust","text":"<p>There exist a broad selection of package managers that manage virtual environments and packages for us. Some of the most popular ones are conda, pip and virtualenv or virtualenvwrapper. They can almost all do the same things:</p> <ul> <li>Install packages</li> <li>Resolve dependencies</li> <li>Managing package versions</li> <li>Managing virtual environments</li> </ul>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#why-uv","title":"Why uv?","text":"<p>You might ask yourself the question of why do we need yet another tool for this? Because it is faster and faster is better. How fast you ask? Between 10 and 100x faster, depending on the task. Besides that it is also fun to use and support something new. But before we get started with some examples, let's go over the key design decisions that make uv so fast.</p>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#design-decisions","title":"Design Decisions","text":"<ul> <li>uv comes as a standalone binary and was written in Rust</li> <li>uv uses a global module cache, that prevents re-downloading of packages when you set up a new project on the same machine</li> <li>During download packages are written directly to disk without memory overhead (Copy-on-Write)</li> <li>uv is a drop-in replacement for pip, pip-tools and can manage virtual environments like virtualenv and conda.</li> </ul> <p>Next, let's go through the most important commands and at the end we'll upgrade the Arxiv Publications Tracker to use uv instead of pip.</p>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#the-most-important-commands","title":"The most important commands","text":"Command Description Example Parameters/Notes uv pip Drop-in replacement for pip commands <code>uv pip install requests</code> Accepts all standard pip arguments and flags uv pip compile Resolves dependencies and creates requirements.txt <code>uv pip compile requirements.in</code> <code>requirements.in</code> contains direct dependencies without versions (e.g., \"requests\\nflask\"). The output <code>requirements.txt</code> will contain all dependencies with pinned versions uv pip sync Installs packages from requirements.txt <code>uv pip sync requirements.txt</code> Ensures exact versions from requirements.txt are installed. Will remove packages not in requirements.txt uv venv Creates a new virtual environment <code>uv venv</code> Creates in current directory as <code>.venv</code> by default. Use <code>--path</code> to specify different location uv sync Syncs the dependencies to the virtual environment <code>uv sync</code> Reads from <code>requirements.txt</code> or <code>pyproject.toml</code>. Use <code>--python</code> to specify Python version uv add Adds a package to the dependencies <code>uv add requests</code> Can specify version constraints (e.g., <code>requests&gt;=2.28.0</code>). Updates requirements files automatically uv remove Removes a package from the dependencies <code>uv remove requests</code> Removes both the package and its unused dependencies uv list Lists all installed packages <code>uv list</code> Use <code>--freeze</code> to output in requirements.txt format uv run Runs a Python script in an isolated environment <code>uv run script.py</code> Creates temporary venv with dependencies from <code>requirements.txt</code> or <code>pyproject.toml</code>. Use <code>--python</code> to specify version","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#about-pyprojecttoml","title":"About pyproject.toml","text":"<p>The <code>pyproject.toml</code> file is a standardized configuration file for Python projects (defined in PEP 518). When using uv, this file can specify your project's dependencies instead of using requirements.txt. Here's an example:</p> <pre><code>[project]\nname = \"my-project\"\nversion = \"1.0.0\"\ndependencies = [\n    \"requests&gt;=2.28.0\",\n    \"flask~=2.0.0\",\n    \"pandas&gt;=2.0.0\"\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"black&gt;=23.0.0\"\n]\n</code></pre> <p>The advantages of using pyproject.toml include:</p> <ul> <li>Single source of truth for project metadata and dependencies</li> <li>Support for optional dependency groups (like development tools)</li> <li>Better integration with modern Python packaging tools</li> <li>Ability to specify build requirements and project metadata</li> </ul> <p>When using uv commands like <code>uv sync</code> or <code>uv run</code>, it will automatically detect and use dependencies specified in either pyproject.toml or requirements.txt, with pyproject.toml taking precedence if both exist.</p> <p>In our demo we'll skip creating a pyproject.toml file and only use requirements.txt.</p>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#demo","title":"Demo","text":"<p>The Arxiv Publications Tracker is a very simple tool you can use to find new papers on arXiv.org matching your search criteria. I use it to find new papers on LLM driven AI Agents.</p> <p>The tool runs inside a Docker container, and it uses pip to fetch python dependencies.</p> <p>Our original <code>Dockerfile</code> looks like this:</p> <pre><code># Use a minimal Python 3.11 image\nFROM python:3.11-slim\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the script into the container\nCOPY arxiv_tracker.py /app/arxiv_tracker.py\nCOPY requirements.txt /app/requirements.txt\n\n# Install dependencies\nRUN pip install -r requirements.txt\n\n# Run the script as the entrypoint\nENTRYPOINT [\"python\", \"/app/arxiv_tracker.py\"]\n</code></pre> <p>Our <code>requirements.txt</code> file contains the dependency to the arxiv python package:</p> <pre><code>arxiv\n</code></pre> <p>To upgrade this project to uv we'll need to install uv in the docker container and then modify the <code>RUN pip install -r requirements.txt</code> command.</p> <p>Since we know uv pip is a drop-in replacement for pip we simply change the command</p> <pre><code>RUN pip install -r requirements.txt\n</code></pre> <p>to</p> <pre><code>RUN uv pip install -r requirements.txt\n</code></pre> <p>If you want to install uv on your machine follow the installation guide for uv on PyPi or Astral.sh.</p> <p>If we run the build script <code>./build_and_run.sh</code> we get the following error:</p> <pre><code>=&gt; ERROR [arxiv_watchdog 5/5] RUN uv pip install -r requirements.txt\n0.250 /bin/sh: 1: uv: not found\n</code></pre> <p>It seems that uv is not part of our docker base image <code>python:3.11-slim</code> and therefore not found when we try to run it. This can easily be fixed, because uv can be installed using pip, and we know we already had pip available in the container.</p> <p>We simply have to add the following line to our Dockerfile, before we can use uv.</p> <pre><code>RUN uv pip install -r requirements.txt\n</code></pre> <p>If we run the build script again, we see a different error:</p> <pre><code> =&gt; ERROR [arxiv_watchdog 6/6] RUN uv pip install -r requirements.\n .351 error: No virtual environment found; run `uv venv` to create an environment, or pass `--system` to install into a non-virtual environment\n</code></pre> <p>This is because uv requires us to create a virtual environment or explicitly specify <code>--system</code> if we don't want to use one. Since we have nothing else running in the docker container, we'll be fine using --system.</p> <p>The updated and final version of our Dockerfile looks like this:</p> <pre><code># Use a minimal Python 3.11 image\nFROM python:3.11-slim\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the script into the container\nCOPY arxiv_tracker.py /app/arxiv_tracker.py\nCOPY requirements.txt /app/requirements.txt\n\n# Install dependencies\nRUN pip install uv\nRUN uv pip install --system -r requirements.txt\n\n# Run the script as the entrypoint\nENTRYPOINT [\"uv\", \"run\", \"/app/arxiv_tracker.py\"]\n</code></pre> <p>Notice that we have modified the <code>ENTRYPOINT</code> to run the <code>arxiv_tracker.py</code> script using <code>uv</code> instead of <code>python</code> directly.</p>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#conclusion","title":"Conclusion","text":"<p>This is it! We have successfully upgraded the arXiv publications tracker to use uv instead of pip. If you are interested, you can get the updated version of the arXiv publications tracker here and give it a try. To learn more about what you can do with uv, check out the official uv documentation.</p> <p>Takeaways</p> <ul> <li>uv is ultra fast</li> <li>uv is a drop in replacement for pip and pip-tools</li> <li>uv can replace conda and virtualenv</li> <li>read the official uv documentation to learn more</li> </ul>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/23/dev-tools-uv/#links-and-resources","title":"Links and Resources","text":"<ul> <li>uv: Python packaging in Rust by the creator of uv Charlie Marsh</li> <li>uv on Astral.sh - The official documentation for uv</li> <li>uv on PyPi - The mirrored documentation for uv on PyPi</li> <li>Arxiv Publications Tracker - A Python based tool to incrementally find the latest publications on arXiv</li> </ul> <p>Other Package Managers</p> <ul> <li>conda - OS-agnostic, system-level binary package and environment manager</li> <li>pip - pip is the package installer for Python</li> <li>pip-tools - A set of command line tools to help you keep your pip-based packages fresh</li> <li>virtualenv - a tool to create isolated Python environments</li> <li>virtualenvwrapper - a tool to manage virtual environments</li> </ul>","tags":["Python","Package Manager","Software Development","Rust","Dependency Management"]},{"location":"writing/2025/02/01/the-default-heuristic/","title":"How to Choose Tech for Production: The Default Heuristic","text":"","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#introduction","title":"Introduction","text":"<p>During my time as a lead data engineer to build a predictive maintenance platform I came across the concept of the default heuristic. One of my tasks was to identify platform components that would allow us to scale storage and retrieval of time series sensory data to petabytes, while still being able to support critical use cases of data scientists as well as analytical reporting.</p> <p>I am not the first one to tell you that from a developer perspective using the latest cutting edge tech for the job seems like a great idea. After all, new tech usually looks great on paper, and is fun to learn and experiment with. However, for production systems that require long-term stability, maintainability, and reliability, the smarter choice often lies in opting for established, proven solutions. This approach is choosing the \"Default Heuristic\".</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#understanding-the-optimization-fallacy","title":"Understanding the Optimization Fallacy","text":"<p>The Optimization Fallacy refers to the misguided pursuit of the \"perfect\" or \"optimal\" solution, often at the expense of time, resources, and clarity. Developers are particularly susceptible due to their innate curiosity and love for problem-solving.</p> <p>Why it happens:</p> <ul> <li>Excessive Tinkering: The thrill of exploring cutting-edge tools.</li> <li>Delusion of Discoverability: Believing the best option will reveal itself with exhaustive research and trials.</li> <li>Premature Optimization: Attempting to solve problems that haven't yet occurred.</li> </ul> <p>The fallacy: This relentless chase can delay progress, inflate costs, and introduce unnecessary complexity instead of identifying the optimal solution for the use-case.</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#the-default-heuristic","title":"The Default Heuristic","text":"<p>The Default Heuristic on the other hand is a decision-making strategy that prioritizes established, reliable choices over the pursuit of novel or untested alternatives. It is particularly beneficial when:</p> <ol> <li>Costs of New Information are High: Researching and testing new tools consumes time and resources (e.g., extensive benchmarks for five different databases, redesigning a pipeline to work with an unproven tool, or rewriting major parts of an application to fit a new framework).</li> <li>Consequences of Deviation are Low: The safe, default choice is unlikely to lead to catastrophic outcomes (e.g., sticking with REST APIs rather than trying GraphQL for the first time).</li> <li>Variability in Outcomes is Minimal: The range of potential results from using the default is narrow and predictable (e.g., using AWS S3 for object storage rather than testing a newer, less mature cloud storage service).</li> </ol>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#real-world-examples","title":"Real world examples","text":"","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#how-pinterest-scaled-from-0-to-10s-of-billions-of-page-views-per-month","title":"How pinterest scaled from 0 to 10s of billions of page views per month","text":"<p>Pinterest's system design evolution is a great example of the efficacy of the Default Heuristic in decision-making. Initially, during their rapid growth phase, Pinterest integrated a variety of - at that time - cutting-edge technologies, including Cassandra and MongoDB, in an attempt to manage their expanding infrastructure. However, this approach led to increased complexity and system failures. Pinterest recognized these challenges and shifted focus to mature, reliable technologies such as MySQL, Solr, Memcache, and Redis. This strategic pivot allowed them to scale effectively by adding more of the same components, thereby simplifying their architecture and enhancing system stability.</p> <p>This case illustrates the pitfalls of the Optimization Fallacy-pursuing novel solutions without fully considering the associated costs and complexities. By using the Default Heuristic, they reduced avoided unnecessary experimentation with unproven tools, and employed established technologies that offered predictable performance and robust community support. Their decision minimized the risks associated with excessive tinkering and premature optimization, ultimately contributing to their successful scaling and operational efficiency. [1]</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#stackoverflow-update-560m-pageviews-a-month-25-servers-and-its-all-about-performance","title":"StackOverflow Update: 560M Pageviews a Month, 25 Servers, and It's All About Performance","text":"<p>Overflow's infrastructure strategy is another example of the application of the Default Heuristic. By favoring established, reliable technologies such as Microsoft IIS for web servers and MS SQL for database management, they ensured system stability and performance. Additionally, they pragmatically incorporated Linux-based solutions like HAProxy for load balancing and Redis for caching where appropriate. In my opinion this shows a balanced approach to technology selection. The deliberate choice to utilize proven technologies, instead of pursuing novel or untested alternatives, has Default Heuristic written all over it. And by doing that they got reliability and predictability in their system design. [2]</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#conclusion","title":"Conclusion","text":"<p>SQL Databases seem to be a common theme in the above examples, but you get the idea. There is a default heuristic for many areas of tech: Programming languages, Webframeworks, CD/CI SAAS, Data Storage, Project management tools, the list goes on. To summarize:</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#when-to-use-the-default-heuristic","title":"When to Use the Default Heuristic","text":"<ol> <li>Resource-Constrained Projects: Limited budgets and tight deadlines benefit from predictable outcomes (e.g., using JavaScript with Node.js for a web application rather than experimenting with a newer runtime like Deno).</li> <li>Critical Applications: Reliability outweighs innovation in high-stakes environments (e.g., choosing Python over a niche language for a healthcare application requiring heavy compliance with legal standards).</li> <li>Rapid Scaling: When scaling a system, adopting a well-documented technology eases the learning curve (e.g., opting for Kubernetes over a less established container orchestration platform).</li> <li>Unclear Long-Term Requirements: Opting for a default allows flexibility as needs evolve (e.g., choosing PostgreSQL over a specialized database when future workloads are uncertain).</li> </ol>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#why-use-the-default-heuristic","title":"Why Use the Default Heuristic?","text":"<ul> <li>Proven Reliability: Battle-tested solutions are trusted by a broader community.</li> <li>Rich Ecosystem: Established tools offer extensive documentation, community support, and real-world use cases.</li> <li>Talent Availability: It\u2019s easier to find skilled professionals experienced with widely adopted technologies.</li> <li>Risk Reduction: Sticking with the familiar reduces operational uncertainty.</li> </ul>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#how-to-balance-exploration-and-defaults","title":"How to Balance Exploration and Defaults","text":"<p>If you have capacity and talent to experiment with new tech, you should aim to:</p> <ul> <li>Reserve Defaults for Production: Use proven tech for core systems where failure is costly.</li> <li>Experiment in Sandboxes: Explore new tools in isolated environments without risking operational stability.</li> <li>Debias Decision-Making: Acknowledge cognitive biases, like the Optimization Fallacy, and prioritize pragmatism.</li> </ul>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#tldr","title":"TLDR","text":"<p>Use the default heuristic to:</p> <ol> <li>Prioritize Stability: Choose technologies with a track record of reliability for critical systems.</li> <li>Minimize Risks: Avoid falling for the Optimization Fallacy by relying on well-understood solutions.</li> <li>Leverage The Community: Established tools have extensive support networks, reducing implementation and troubleshooting costs.</li> </ol> <p>By embracing the Default Heuristic, you balance innovation with stability. Let the safe, predictable defaults power your production systems, and channel your curiosity and creativity into exploratory projects where the stakes are lower.</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/02/01/the-default-heuristic/#references","title":"References","text":"<p>[1] Y. Nelapati and M. Weiner, \"Scaling Pinterest - From 0 to 10s of Billions of Page Views a Month in Two Years,\" High Scalability, Apr. 15, 2013. www.highscalability.com</p> <p>[2] M. Cecconi and N. Craver, \"StackOverflow Update: 560M Pageviews a Month, 25 Servers, and It's All About Performance,\" High Scalability, Jul. 21, 2014. www.highscalability.com</p>","tags":["Default Heuristic","Tech Selection","Optimization Fallacy","Production Systems","Data Engineering"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/","title":"Interview Series: Working with an SRE","text":"","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#preamble","title":"Preamble","text":"<p>In this insightful interview, Paul B\u00fctow, a Principal Site Reliability Engineer at Mimecast, shares over a decade of experience in the field. Paul highlights the role of an Embedded SRE, emphasizing the importance of automation, observability, and effective incident management. We also focused on the key question of how you can work effectively with an SRE weather you are an individual contributor or a manager, a software engineer or data scientist. And how you can learn more about site reliability engineering.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#introducing-paul","title":"Introducing Paul","text":"<p>Hi Paul, please introduce yourself briefly to the audience. Who are you, what do you do for a living, and where do you work?</p> <p>My name is Paul B\u00fctow, I work at Mimecast, and I\u2019m a Principal Site Reliability Engineer there. I\u2019ve been with Mimecast for almost ten years now. The company specializes in email security, including things like archiving, phishing detection, malware protection, and spam filtering.</p> <p>You mentioned that you\u2019re an \u2018Embedded SRE.\u2019 What does that mean exactly?</p> <p>It means that I\u2019m directly part of the software engineering team, not in a separate Ops department. I ensure that nothing is deployed manually, and everything runs through automation. I also set up monitoring and observability. These are two distinct aspects: monitoring alerts us when something breaks, while observability helps us identify trends. I also create runbooks so we know what to do when specific incidents occur frequently.</p> <p>Infrastructure SREs on the other hand handle the foundational setup, like providing the Kubernetes cluster itself or ensuring the operating systems are installed. They don't work on the application directly but ensure the base infrastructure is there for others to use. This works well when a company has multiple teams that need shared infrastructure.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#how-did-you-get-started","title":"How did you get started?","text":"<p>How did your interest in Linux or FreeBSD start?</p> <p>It began during my school days. We had a PC with DOS at home, and I eventually bought Suse Linux 5.3. Shortly after, I discovered FreeBSD because I liked its handbook so much. I wanted to understand exactly how everything worked, so I also tried Linux from Scratch. That involves installing every package manually to gain a better understanding of operating systems.</p> <p>And after school, you pursued computer science, correct?</p> <p>Exactly. I wasn\u2019t sure at first whether I wanted to be a software developer or a system administrator. I applied for both and eventually accepted an offer as a Linux system administrator. This was before 'SRE' became a buzzword, but much of what I did back then-automation, infrastructure as code, monitoring-is now considered part of the typical SRE role.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#roles-and-career-progression","title":"Roles and Career Progression","text":"<p>Tell us about how you joined Mimecast. When did you fully embrace the SRE role?</p> <p>I started as a Linux sysadmin at 1&amp;1. I managed an ad server farm with hundreds of systems and later handled load balancers. Together with an architect, we managed F5 load balancers distributing around 2,000 services, including for portals like web.de and GMX. I also led the operations team technically for a while before moving to London to join Mimecast.</p> <p>At Mimecast, the job title was explicitly 'Site Reliability Engineer.' The biggest difference was that I was no longer in a separate Ops department but embedded directly within the storage and search backend team. I loved that because we could plan features together-from automation to measurability and observability. Mimecast also operates thousands of physical servers for email archiving, which was fascinating since I already had experience with large distributed systems at 1&amp;1. It was the right step for me because it allowed me to work close to the code while remaining hands-on with infrastructure.</p> <p>What are the differences between SRE, DevOps, SysAdmin, and Architects?</p> <p>SREs are like the next step after SysAdmins. A SysAdmin might manually install servers, replace disks, or use simple scripts for automation, while SREs use infrastructure as code and focus on reliability through SLIs, SLOs, and automation. DevOps isn\u2019t really a job-it\u2019s more of a way of working, where developers are involved in operations tasks like setting up CI/CD pipelines. Architects focus on designing systems and infrastructures, such as load balancers or distributed systems, working alongside SREs to ensure the systems meet the reliability and scalability requirements. The specific responsibilities of each role depend on the company, and there is often overlap. </p> <p>What are the most important reliability lessons you\u2019ve learned so far?</p> <p>Don\u2019t leave SRE aspects as an afterthought. It\u2019s much better to discuss automation, monitoring, SLIs, and SLOs early on. Traditional sysadmins often installed systems manually, but today, we do everything via infrastructure as code-using tools like Terraform or Puppet. I also distinguish between monitoring and observability. Monitoring tells us, 'The server is down, alarm!' Observability dives deeper, showing trends like increasing latency so we can act proactively. SLI, SLO, and SLA are core elements. We focus on what users actually experience-for example, how quickly an email is sent-and set our goals accordingly. Runbooks are also crucial. When something goes wrong at night, you don\u2019t want to start from scratch. A runbook outlines how to debug and resolve specific problems, saving time and reducing downtime.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#anecdotes-and-best-practices","title":"Anecdotes and Best Practices","text":"<p>Runbooks sound very practical. Can you explain how they\u2019re used day-to-day?</p> <p>Runbooks are essentially guides for handling specific incidents. For instance, if a service won\u2019t start, the runbook will specify where the logs are and which commands to use. Observability takes it a step further, helping us spot changes early-like rising error rates or latency-so we can address issues before they escalate.</p> <p>When should you decide to put something into a runbook, and when is it unnecessary?</p> <p>If an issue happens frequently, it should be documented in a runbook so that anyone, even someone new, can follow the steps to fix it. The idea is that 90% of the common incidents should be covered. For example, if a service is down, the runbook would specify where to find logs, which commands to check, and what actions to take. On the other hand, rare or complex issues, where the resolution depends heavily on context or varies each time, don\u2019t make sense to include in detail. For those, it\u2019s better to focus on general troubleshooting steps. </p> <p>How do you search for and find the correct runbooks?</p> <p>Runbooks should be linked directly in the alert you receive. For example, if you get an alert about a service not running, the alert will have a link to the runbook that tells you what to check, like logs or commands to run. Runbooks are best stored in an internal wiki, so if you don\u2019t find the link in the alert, you know where to search. The important thing is that runbooks are easy to find and up to date because that\u2019s what makes them useful during incidents. </p> <p>Do you have an interesting war story you can share with us?</p> <p>Sure. At 1&amp;1, we had a proprietary ad server software that ran a SQL query during startup. The query got slower over time, eventually timing out and preventing the server from starting. Since we couldn\u2019t access the source code, we searched the binary for the SQL and patched it. By pinpointing the issue, a developer was able to adjust the SQL. This collaboration between sysadmin and developer perspectives highlights the value of SRE work.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#working-with-different-teams","title":"Working with Different Teams","text":"<p>You\u2019re embedded in a team-how does collaboration with developers work practically?</p> <p>We plan everything together from the start. If there\u2019s a new feature, we discuss infrastructure, automated deployments, and monitoring right away. Developers are experts in the code, and I bring the infrastructure expertise. This avoids unpleasant surprises before going live.</p> <p>How about working with data scientists or ML engineers? Are there differences?</p> <p>The principles are the same. ML models also need to be deployed and monitored. You deal with monitoring, resource allocation, and identifying performance drops. Whether it\u2019s a microservice or an ML job, at the end of the day, it\u2019s all running on servers or clusters that must remain stable.</p> <p>What about working with managers or the FinOps team?</p> <p>We often discuss costs, especially in the cloud, where scaling up resources is easy. It\u2019s crucial to know our metrics: do we have enough capacity? Do we need all instances? Or is the CPU only at 5% utilization? This data helps managers decide whether the budget is sufficient or if optimizations are needed.</p> <p>Do you have practical tips for working with SREs?</p> <p>Yes, I have a few:</p> <ol> <li>Early involvement: Include SREs from the beginning in your project.</li> <li>Runbooks &amp; documentation: Document recurring errors.</li> <li>Try first: Try to understand the issue yourself before immediately asking the SRE.</li> <li>Basic infra knowledge: Kubernetes and Terraform aren\u2019t magic. Some basic understanding helps every developer.</li> </ol>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#using-ai-tools","title":"Using AI Tools","text":"<p>Let\u2019s talk about AI. How do you use it in your daily work?</p> <p>For boilerplate code, like Terraform snippets, I often use ChatGPT. It saves time, although I always review and adjust the output. Log analysis is another exciting application. Instead of manually going through millions of lines, AI can summarize key outliers or errors.</p> <p>Do you think AI could largely replace SREs or significantly change the role?</p> <p>I see AI as an additional tool. SRE requires a deep understanding of how distributed systems work internally. While AI can assist with routine tasks or quickly detect anomalies, human expertise is indispensable for complex issues.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#sre-learning-resources","title":"SRE Learning Resources","text":"<p>What resources would you recommend for learning about SRE?</p> <p>The Google SRE book is a classic, though a bit dry. I really like 'Seeking SRE,' as it offers various perspectives on SRE, with many practical stories from different companies.</p> <p>Do you have a podcast recommendation?</p> <p>The Google SRE prodcast is quite interesting. It offers insights into how Google approaches SRE, along with perspectives from external guests.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#blogging","title":"Blogging","text":"<p>You also have a blog. What motivates you to write regularly?</p> <p>Writing helps me learn the most. It also serves as a personal reference. Sometimes I look up how I solved a problem a year ago. And of course, others tackling similar projects might find inspiration in my posts.</p> <p>What do you blog about?</p> <p>Mostly technical topics I find exciting, like homelab projects, Kubernetes, or book summaries on IT and productivity. It\u2019s a personal blog, so I write about what I enjoy.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#wrap-up","title":"Wrap-up","text":"<p>To wrap up, what are three things every team should keep in mind for stability?</p> <p>First, maintain runbooks and documentation to avoid chaos at night. Second, automate everything-manual installs in production are risky. Third, define SLIs, SLOs, and SLAs early so everyone knows what we\u2019re monitoring and guaranteeing.</p> <p>Is there a motto or mindset that particularly inspires you as an SRE?</p> <p>\"Keep it simple and stupid\"-KISS. Not everything has to be overly complex. And always stay curious. I\u2019m still fascinated by how systems work under the hood.</p> <p>Where can people find you online?</p> <p>You can find links to my socials on my website paul.buetow.org. I regularly post articles and link to everything else I\u2019m working on outside of work.</p> <p>Thank you very much for your time and this insightful interview into the world of site reliability engineering</p> <p>My pleasure, this was fun.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#closing-comments","title":"Closing comments","text":"<p>Dear reader, I hope this conversation with Paul B\u00fctow provided an exciting peak into the world of Site Reliability Engineering. Whether you\u2019re a software developer, data scientist, ML engineer, or manager, reliable systems are always a team effort. Hopefully, you\u2019ve taken some insights or tips from Paul\u2019s experiences for your own team or next project. Thanks for joining us, and best of luck refining your own SRE practices!</p> <p>All content comes directly from the recorded conversation and reflects Paul\u2019s personal experiences and views.</p>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/2025/01/12/working-with-an-sre-interview/#links-and-resources","title":"Links and Resources","text":"<ul> <li>Paul's Website: https://paul.buetow.org</li> <li> <p>Paul's Blog: https://foo.zone</p> </li> <li> <p>The Google SRE Book: https://sre.google/books/</p> </li> <li>Seeking SRE Book: https://www.oreilly.com/library/view/seeking-sre/9781491978856/</li> <li>SRE Prodcast: https://sre.google/prodcast/</li> <li>LFS Linux https://linuxfromscratch.org</li> </ul>","tags":["Site Reliability Engineering","Automation","Observability","Incident Management","Tech Careers"]},{"location":"writing/archive/2025/","title":"2025","text":""},{"location":"writing/category/developer-tools/","title":"Developer Tools","text":""},{"location":"writing/category/software-engineering/","title":"Software Engineering","text":""},{"location":"writing/category/applied-ai/","title":"Applied AI","text":""}]}